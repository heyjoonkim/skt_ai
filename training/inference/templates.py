from typing import List, Dict


# TODO : 우리가 모델한테 넣어줄 시스템 메세지 작성하기
SYSTEM_MESSAGE = """You are a system that converts **Korean user inputs** into function calls.  
Even though the input will always be in Korean, your output must strictly follow the function call format.  

Rules:
- Always output only the function call.
- Format: <functionName>(parameters)<end>
- If multiple functions are needed, separate them with a semicolon (;).
- Parameter values must follow the input meaning and be written as key="value".
- Do not add translations, explanations, or extra text."""


# TODO : 우리가 학습할 때 사용할 prompt 넣어주기
# 개인적으론 함수 형태로 정의한거 다 예시로 넣어주면 좋긴할듯?
PROMPT = """def function_WN(brightness: int = None, get: bool = False):
    
    기기의 화면 및 LED 밝기를 조절하거나 현재 밝기 상태를 조회하는 함수.

    설명:
    - brightness 파라미터로 밝기 단계를 설정 가능하며, 0은 LED/화면 끄기를 의미함.
    - brightness 값 1~5는 낮음에서 높음 순의 밝기 단계 설정임.
    - brightness=-1은 모호하거나 범위 표현에 대한 내부 해석용 값임.
      단, 다음과 같은 동의어는 반드시 해당 구체 밝기 값으로 강제 변환하여 호출해야 하며,
      brightness=-1 호출은 명세 위반임:
        * '최대', '오', '5단계', '5단계로 해줘', '최대로' 등은 brightness=5 로 강제 변환.
        * '중간', '적당히', '3단계(강조)' 등은 brightness=3 으로 강제 변환.
        * '최소', '영', '0단계', '끄기' 등은 brightness=0 으로 강제 변환.
      - '높여줘', '낮춰줘', '기본 설정', '디폴트', '초기화', '강도 변경', '50%' 등
        명확한 수치 변환이 어려운 모호한 범위 표현에 대해서만 brightness=-1 로 호출하며,
        이후 내부 해석 로직이 필요함.

    - get=True 로 호출 시 현재 밝기 상태를 조회하며, 이 경우 brightness 값은 무시됨.
    - brightness와 get은 상호배타적이며, 둘 다 지정된 경우 get=True 가 우선 적용됨.
    - brightness=None 이고 get=False 인 경우 기능을 수행하지 않음.

    Parameters:
    - brightness (int, optional): 밝기 단계 조절 값
        * 0    → LED/화면 완전 끄기 (최소 밝기)
        * 1~5  → 밝기 단계 (1: 가장 낮음, 5: 가장 밝음)
        * -1   → 모호하거나 범위 표현용 내부 해석 값
                 (모호한 표현: "기본 설정", "디폴트", "초기화", "높여줘", "낮춰줘", "강도 변경", "50%" 등)
                 단,
                 - '최대', '오', '5단계', '5단계로 해줘', '최대로' 등은 반드시 brightness=5 로 변환 호출해야 하며 -1 호출은 금지.
                 - '중간', '적당히', '3단계(강조)' 등은 반드시 brightness=3 으로 변환 호출해야 하며 -1 호출은 금지.
                 - '최소', '영', '0단계', '끄기' 등은 반드시 brightness=0 으로 변환 호출해야 함.

    우선순위 및 규칙:
    - get=True 가 최우선이며, 호출 시 조회 모드로 동작함.
    - brightness=None 이고 get=False 인 경우 동작하지 않음.
    - brightness=-1 은 오직 모호한 범위 표현에 대해서만 사용하며, 명확한 동의어는 구체값으로 변환해야 함.
    - '최대', 유사 표현은 반드시 brightness=5 로 호출해야 하며, brightness=-1 호출은 명세 위반임.
    - '중간', 유사 표현은 반드시 brightness=3 으로 호출해야 하며, brightness=-1 호출은 명세 위반임.
    - '최소', 유사 표현은 brightness=0 으로 호출해야 함.
    - brightness 와 get 은 상호배타적이며, get=True 가 우선 적용됨.

    동의어 사전 (강제 변환 대상 예시):
    - brightness=5: 최대, 오, 5단계, 5단계로 해줘, 최대로
    - brightness=0: 최소, 영, 0단계, 끄기
    - brightness=3: 중간, 적당히, 3단계(강조)
    - brightness=-1: 기본 설정, 디폴트, 초기화, 높여줘, 낮춰줘, 강도 변경, 50% 등 모호한 범위 표현

    반환 값:
    - get=True 호출 시 현재 밝기에 대한 상태 정보 반환 (구현에 따름).

    참고 및 권고:
    - 예시 발화 "화면 밝기를 최대로 올려줘"는 반드시 brightness=5 로 호출되어야 하며, brightness=-1 호출은 명세 위반으로 수정 권고됨.
    - 예시 발화 "디스플레이의 밝기를 중간으로 맞춰줘"는 반드시 brightness=3 으로 호출되어야 하며, brightness=-1 호출은 명세 위반으로 수정 권고됨.
    - 기타 유사 동의어 처리 시에도 명확한 구체값 호출을 권장하며, -1 호출은 모호 표현에 한해 제한적으로 사용해야 함.
    
    

def function_MV(mute: bool = None, get: bool = False):
    
    음소거(Mute) 기능을 제어하거나 현재 음소거 상태를 조회하는 함수.

    설명:
    - 음소거 기능을 켜거나 끄는 동작을 제어하거나, 현재 음소거 상태를 조회한다.
    - mute와 get 파라미터는 상호배제 관계이며 동시에 True/값으로 설정하지 않는다.
      즉, 두 파라미터 중 하나만 의미 있는 값을 가져야 하며, 둘 다 None 또는 False일 경우 동작하지 않는다.

    동작별 파라미터 설정:
      * 음소거 켜기 (소리 끄기) : mute=True
        관련 발화 예) 
          - "음소거 켜줘", "소리 꺼줘", "음소거 해줘", "음소거" (단독 발화)
          - "음소거 꺼줘" (사용자 의도에 따라 음소거 켜기로 해석)
      * 음소거 해제 (소리 켜기) : mute=False
        관련 발화 예) "음소거 해제해줘", "소리 켜줘", "음소거 취소해줘", "음소거 그만"
      * 음소거 상태 조회 : get=True
        관련 발화 예) "음소거 상태야", "음소거 되어있어", "음소거 설정이 어떻게되", "음소거 기능 켜져있어"

    발화 해석 주요 규칙:
      * "음소거 꺼줘"는 일반 사용자의 의도를 고려하여 음소거 켜기(mute=True)로 해석한다.
      * 단독 "음소거" 발화는 상태 조회가 아닌 음소거 켜기(mute=True)로 간주한다.
      * mute와 get 파라미터는 상호배제됨. 동시에 True 등이 설정되지 않아야 한다.
      * mute 파라미터는 None, True, False 중 하나이며, None은 음소거 상태 변경 없음.
      * get 파라미터는 bool이며, 기본값은 False (조회하지 않음).
      * 두 파라미터가 모두 None 또는 False인 경우 동작하지 않으며, 무효 호출로 간주할 수 있음.

    Parameters:
    - mute (bool or None, optional): 음소거 모드 설정
        * True  → 음소거 켜기 (소리 끄기)
        * False → 음소거 해제 (소리 켜기)
        * None  → 음소거 상태 변경하지 않음 (기본값)
    - get (bool, optional): 현재 음소거 상태 조회 여부 (기본값 False)
        * True  → 현재 음소거 상태 반환
        * False → 상태 조회하지 않음

    반환:
    - 없음 (동작 수행 혹은 상태 반환)
    
    

def function_FR():
    
    필터 관련 동작을 수행하는 함수.

    설명:
    - 사용자가 필터 상태 확인, 필터 기능 실행 등의 요청을 했을 때 호출됨.
    - 별도의 파라미터가 없으며, 필터와 관련된 모든 기본 동작을 처리.

    Parameters:
    - 없음
    
    

def function_ID(get: bool = True):
    
    기기의 현재 작동 상태를 조회하는 함수.

    설명:
    - 사용자가 기기의 현재 작동 상태 여부를 묻는 다양한 표현(예: "공기청정기 실행 중인가요?", "작동 중인가요?", "현재 뭐하고 있어?", "충전 중인지 알려줘")에 호출됨.
    - get=True 로 항상 호출되어 현재 상태를 반환함.

    Parameters:
    - get (bool): 현재 기기 상태 조회 여부
        * True → 현재 기기 상태를 반환함
        * False → 상태 조회 기능 비활성화 (기본적으로 사용되지 않음)

    반환값:
    - 현재 기기의 작동 상태 정보(예: 공기청정 모드 작동 여부, 충전 상태 등)를 포함하는 구조체 또는 문자열 반환 예상.

    동의어 및 표현 범위:
    - "실행 중", "작동 중", "운전 중" 등 모두 현재 작동 상태 문의로 간주.
    - "충전 중" 등 추가 상태 문의 포함 가능.

    우선순위:
    - 항상 get=True 로 호출하여 상태 조회 실행.
    
    

def function_ZX(enable: bool):
    
    매너모드(Manner Mode)를 제어하는 함수.

    설명:
    - 사용자가 매너모드를 켜달라고 요청하면 enable=True로 호출됨.
      (예: "매너모드 켜줘", "매너모드 작동시켜줘", "매너모드 활성화해줘", "매너모드 설정해줘")
    - 사용자가 매너모드를 꺼달라고 요청하면 enable=False로 호출됨.
      (예: "매너모드 꺼줘", "매너모드 중지해줘", "매너모드 비활성화해줘", "매너모드 설정 해제해줘")
    - 매너모드는 소리를 줄이고 방해되지 않도록 기기의 동작을 조절하는 모드임.

    Parameters:
    - enable (bool): 매너모드 켜기/끄기
        * True  → 매너모드 켜기 (활성화)
        * False → 매너모드 끄기 (비활성화)
    
    

def function_SB(type: int):
    
    제품의 구성, 스펙, 인증, 보안 관련 정보를 제공하는 함수.

    설명:
    - 제품 관련 다양한 정보 요청을 type 파라미터로 구분하여 처리함.
    - type 값에 따라 다음과 같이 요청 내용을 구분:
        * 1: 인증 정보 조회 (예: "어떤 인증을 받았어?", "인증 정보 알려줘")
        * 2: 필터 종류/필터 정보 조회 (예: "어떤 필터를 사용해?", "필터 종류 알려줘", "어떤 필터를 사야해")
        * 3: 소음 정보 조회, 최대 소음 수준 포함 (예: "공기청정기 최대 소음은?", "소음 수준 알려줘", "최대 소음은 어느 정도야?", "강력 설정에서의 소음 수준이 어떻게 돼?")
        * 4: 제품 구성 요소 및 구조 설명 (예: "구성 요소 설명해줘", "제품 구조 알려줘", "공기청정기 구성을 설명해줄래")
        * 5: 개인정보 보호 및 보안 관련 정보 (예: "개인정보는 안전해?", "보호 체계 있어?", "내 개인정보는 안전하게 보관되는 거지", "개인정보 보안은 되어있는 거야")

    파라미터 의미 및 제약:
    - type (int): 요청 정보 구분 값 (필수 파라미터)
        * 1 → 인증 정보
        * 2 → 필터 정보
        * 3 → 소음 정보 (최대 소음 포함)
        * 4 → 구성 요소 및 제품 구조
        * 5 → 개인정보 보호 및 보안 관련 정보

    추가 명세 보강:
    - type 값은 반드시 1~5 사이의 정수여야 하며, 이외 값은 허용하지 않음.
    - 요청 유형이 중복되거나 모호할 경우(예: "내 기기에 대한 정보를 알고 싶어")는 개인정보 보호/보안(type=5) 우선 처리.
    - 동의어 및 유사 표현은 명시적으로 매핑되어 있으며, 데이터셋 예시를 모두 포괄함.
    - 반환 스키마는 요청 종류별로 적절한 정보 딕셔너리를 반환한다고 가정함 (구체 구조는 호출 함수 설계에 따름).
    
    

def function_CS(type: int):
    
    공기청정기 또는 에어 센서 설치 관련 가이드 요청을 처리하는 함수.

    설명:
    - 사용자가 설치 위치와 관련된 질문을 하면 설치 위치 추천 가이드(type=1) 제공.
    - 공기청정기 필요 대수 문의 시 대수 추천 가이드(type=2) 제공.
    - 에어 센서 설치 위치 문의 시 센서 위치 추천 가이드(type=3) 제공.
    - 동의어 및 표현 변형은 모두 해당 type으로 매핑됨.

    Parameters:
    - type (int): 가이드 요청 유형 (상호배타적)
        * 1 → 기기(공기청정기 포함 전체) 설치 위치 추천
        * 2 → 공기청정기 권장 대수 추천
        * 3 → 에어 센서 설치 위치 추천 (공기청정기와 분리하여 명확 구분)
    
    

def function_JJ():
    
    기기의 배터리 상태(잔량 및 충전량)를 조회하는 함수.

    설명:
    - 사용자가 배터리 잔량 또는 충전 상태를 문의할 때 호출된다.
    - 별도의 파라미터가 없으며, 호출 시 현재 배터리 잔량(%)과 충전 상태 정보를 반환한다.
    - 배터리 관련 동의어(잔량, 충전량, 상태, 남은 양 등)에 모두 대응한다.

    Parameters:
    - 없음
    
    

def function_YA(move: int):
    
    기기의 이동(운행) 기능을 제어하는 함수.

    설명:
    - "이동 멈춰줘", "운행 종료해줘", "이동 끝내줘", "이동 정지해줘", "이동 그만둬" 등 중단 의도를 나타내는 발화는 move=0으로 호출됨.
    - "이동 잠시 일시 정지해줘", "드라이브 잠깐 멈춰", "드라이브를 잠시 멈춰줘", "드라이브 일시 정지해" 등 일시 중지 의도를 나타내는 발화는 move=1로 호출됨.
    - "운행 다시 시작해", "멈춘 주행 빨리 다시 켜봐", "운행 빨리 다시 틀어", "운행 지금 바로 다시 켜줘" 등 재개 의도를 나타내는 발화는 move=2로 호출됨.

    Parameters:
    - move (int): 이동 제어 코드
        * 0 → 이동 정지 (완전한 멈춤/종료/끝내기 등 중단 행위)
        * 1 → 이동 일시 정지 (잠깐 멈춤/일시 중단)
        * 2 → 이동 재개 (멈췄던 이동/운행을 다시 시작)
    
    

def function_MO(timeframe: int, location: str = "0"):
    
    특정 위치와 시점의 날씨 정보를 조회하는 함수.

    설명:
    - 사용자가 특정 지역과 시점의 날씨를 묻는 발화에 대해 호출한다.
      예: "오늘 서울 날씨", "내일 아부다비 날씨", "월요일 멜버른 날씨", "주말 세종시 날씨".
    - timeframe은 조회할 시점을 의미하며, 0부터 9까지의 정수 중 하나로 상호 배타적으로 구분된다.
    - location은 조회할 지역명이며 아래 규칙에 따라 처리한다.
      * 위치 미지정 또는 불명확한 경우 기본값 "0"을 사용한다.
      * 위치 정보가 포함되지 않거나 불명확한 경우 반드시 location="0"으로 지정한다.
      * 의미 없는 단어(예: 조사, 부사, 무의미 단어 등)가 위치명으로 오인된 경우 반드시 location="0"으로 지정해야 한다.
      * 발화 내 위치 정보 추출이 어려운 경우 location="0"으로 호출한다.
      * "여기", "여기요"와 같은 지시대명사는 위치로 간주하지 않고 location="0"으로 처리한다.
      * 발화 내에서 위치 정보가 불확실하거나 의미 없는 단어가 위치로 오인된 사례가 있을 경우 location="0"으로 반드시 수정 처리해야 한다.
    - timeframe과 location은 독립적이며 상호 배타적이지 않다.

    Parameters:
    - timeframe (int): 시점 구분 값 (0~9 범위의 정수, 상호 배타적)
        * 0 → 현재 (오늘)
        * 1 → 내일
        * 2 → 주말
        * 3 → 월요일
        * 4 → 화요일
        * 5 → 수요일
        * 6 → 목요일
        * 7 → 금요일
        * 8 → 토요일
        * 9 → 일요일
    - location (str): 조회할 위치명
        * 도시명, 구명, 국가명 등 다양한 지명 허용
        * "0" → 위치 미지정 또는 불명확한 경우 기본값
        * 의미 없는 단어(조사, 부사, 무의미 단어 등)가 위치로 오인된 경우 반드시 "0"으로 지정
        * 지시대명사("여기", "여기요" 등)는 위치로 간주하지 않고 "0"으로 지정

    동의어 및 매핑 규칙:
    - "오늘" → timeframe=0
    - "내일" → timeframe=1
    - "주말" → timeframe=2
    - "월요일"~"일요일" → 각각 3~9로 매핑 (월=3, 화=4, 수=5, 목=6, 금=7, 토=8, 일=9)
    - 위치 정보가 없거나 불명확할 때 location="0"으로 지정
    - 의미 없는 단어가 위치로 오인된 경우 반드시 location="0"으로 지정
    - 지시대명사("여기", "여기요" 등)는 위치로 간주하지 않고 location="0"으로 지정
    - 발화 내 위치 정보 추출이 어려운 경우나 의미 없는 단어가 위치로 인식된 경우에는 반드시 location="0"으로 교정하여 호출해야 함
      예: "금요일 날씨 많이 추워" (<function_MO>(timeframe=7, location="보고"))는 <function_MO>(timeframe=7, location="0")으로 수정함

    반환:
    - 환경에 따라 적절한 날씨 정보 스키마를 반환한다.

    사용 예외사항:
    - 발화에서 위치 정보 추출이 어려운 경우 반드시 location="0"으로 지정해 호출해야 한다.
      예: "금요일 날씨 많이 추워" 발화에서 "보고"가 위치로 오인된 경우,
           location="보고" → "0"으로 반드시 교정해야 한다.
    
    

def function_ZV(volume: int = None, get: bool = False):
    
    효과음 및 볼륨 크기를 조절하거나 현재 볼륨 상태를 조회하는 함수.

    설명:
    - 사용자 명령에서 볼륨 단계를 지정하면 volume 파라미터로 호출됨.
      (음소거(0), 낮춤(-1, 1단계 낮추기 상대 제어), 1~5단계 절대 볼륨 조절)
    - volume=-1은 현재 볼륨을 1단계 낮추는 상대 조절이며, 최솟값 0을 유지함.
    - 볼륨 올리기(증가) 요청은 명세에 정의되어 있지 않으며, 해당 발화는 별도 예외 처리 또는 무시 권고됨.
      * "올려주세요", "높여줘", "목소리 강도 올려주세요" 등 볼륨 증가 요청은 함수 호출 없이 예외 처리 또는 무시 권장.
    - get=True로 호출하면 현재 볼륨 상태를 조회함.
    - volume과 get는 동시에 사용하지 않으며, volume이 지정되면 get는 False임.
    - 모호하거나 의도가 불명확한 발화(예: "소리 조절해 줄 수 있어요?", "기본 수준으로 오디오 설정해 주세요")는 예외 처리됨.
      * 이러한 모호한 요청은 함수 호출 없이 예외 처리 또는 무시 권고되며,
        volume=-1로 매핑하거나 function_ZV 호출해서는 안 됨.

    Parameters:
    - volume (int, optional): 볼륨 제어 값
        * -1   → 볼륨 1단계 낮추기 (상대 조절, 최솟값 0 유지)
        * 0    → 음소거 (무음)
        * 1~5  → 절대 볼륨 단계, 1은 최저, 5는 최고
        * None → 볼륨 조절 없음, 주로 예외 처리 대상 발화에 해당
    - get (bool): 현재 볼륨 상태 조회 여부 (default: False)
        * True  → 현재 볼륨 상태 반환, volume 값은 지정하면 안 됨
        * False → 상태 조회하지 않음

    제약 사항:
    - volume과 get는 상호배타적이며 동시에 지정할 수 없음.
    - volume 값은 반드시 -1, 0, 1, 2, 3, 4, 5, 또는 None이어야 함.
    - 볼륨 단계는 정수 단위이며, 범위를 벗어나면 최솟값(0) 또는 최댓값(5)으로 클램핑됨.
    - 볼륨 올리기 및 모호한 요청은 함수 호출 없이 별도 예외 처리 또는 무시 권고.
      * "목소리 강도 올려주세요", "기본 수준으로 오디오 설정해 주세요", "소리 조절해 줄 수 있어요?" 등
    - 모호한 요청 및 볼륨 증가 요청을 volume=-1로 매핑하지 않으며,
      function_ZV 호출 없이 예외 처리 또는 무시 권고.
    - 명백히 function_ZV(volume=-1) 호출하는 사례는 오류이며,
      데이터 처리 단계에서 필터링 또는 예외 처리 필요.

    반환 스키마:
    - get=True인 경우 현재 볼륨 상태를 int 타입으로 반환 (0~5 사이)
    - volume 조절 시에는 상태 반환 없음 또는 성공 여부 반환 (추가 정책에 따라 결정)
    - 예외 처리된 모호 발화 및 볼륨 증가 요청 발화에 대해서는 함수 호출 없음 (None 반환 또는 별도 예외 처리)

    동의어 사전:
    - 음량, 볼륨, 소리, 효과음, 목소리 세기 등 모두 volume 제어 대상에 포함
    - 낮추다, 줄이다, 작게 하다 등은 volume=-1로 매핑
    - 음소거, 꺼줘, 0단계 지정은 volume=0으로 매핑
    - 몇 단계야?, 몇 프로야?, 상태 확인 문의 등은 get=True로 매핑
    - 올려주세요, 높여줘, 목소리 강도 올려주세요 등 볼륨 증가 표현은 함수 호출 없이 예외 처리 권고
    - 모호한 요청(예: "소리 조절해 줄 수 있어요?", "기본 수준으로 오디오 설정해 주세요")도 함수 호출 없이 예외 처리 권고

    우선순위 규칙:
    - volume 값이 명시되면 get는 반드시 False여야 함
    - 음량 감소 요청 시 volume=-1 처리
    - 상태 조회 발화는 반드시 get=True 처리
    - 볼륨 올리기 및 모호한 요청은 함수 호출 없이 별도 예외 처리 또는 무시 권고

    예외/주의:
    - "목소리 강도 올려주세요", "기본 수준으로 오디오 설정해 주세요", "소리 조절해 줄 수 있어요?" 등
      볼륨 증가 혹은 모호한 요청은 function_ZV 호출 없이 처리되어야 하며,
      이들 발화에 대해 volume=-1과 함께 함수 호출하는 것은 명백한 오류임.
    
    

def function_UJ():
    
    필터의 상태 및 사용량 정보를 조회하는 함수.

    설명:
    - 사용자가 필터 상태, 필터 사용량, 필터 수명 등을 문의할 때 호출됨.
    - 별도의 파라미터가 없으며, 호출 시 현재 필터의 상태와 사용량 정보를 반환.

    Parameters:
    - 없음
    
    

def function_GV():
    
    바이탈 사인(Vital Sign)을 측정하는 함수.

    설명:
    - 사용자가 생체 신호(혈압, 맥박 수치, 산소포화도, 스트레스 지수 등) 측정을 요청할 때 호출됨.
    - 별도의 파라미터 없이 호출 시 기기가 자동으로 모든 바이탈 사인 항목을 통합 측정함.
    - 개별 바이탈 사인 항목만을 선택적으로 측정하는 기능은 현재 제공하지 않음.
    - 따라서 "맥박 수치 측정"과 같은 특정 항목 요청 발화도 전체 바이탈 사인을 측정하는 이 함수 호출로 매핑됨.

    Parameters:
    - 없음

    기본 동작 규칙:
    - 호출 시 모든 바이탈 사인 항목(혈압, 맥박 수치, 산소포화도, 스트레스 지수 등)을 통합 측정함.
    - 개별 특정 항목만 측정하는 별도 기능 없음.
    - 데이터셋 내 발화에 '맥박 수치 측정' 등 개별 항목 요청 표현이 있어도 function_GV() 호출로 매핑하되,
      이는 명세상 제한된 기능 범위로 인한 것으로, 발화 의도와 기능 불일치에 주의.

    참고:
    - 추후 개별 바이탈 사인 측정 기능이 추가될 경우 파라미터 도입 등 명세 수정이 필요함.
    
    

# 정리 설명
# - 발화에서 개별 항목 측정을 요구하는 표현(예: 맥박 수치 측정 등)이 있어도, 현재 명세상 function_GV()는 개별 선택 기능이 없음.
# - 따라서 모든 해당 발화는 function_GV()로 매핑하는 것이 맞으나, 발화 의도와 기능 범위 차이로 혼동 가능함.
# - 이를 명세에 명확히 기술하여 사용자가 이해할 수 있도록 보완하였다.

def function_GQ(gender: int = None, get: bool = False):
    
    음성 출력(TTS)에서 사용할 목소리의 성별을 설정하거나 현재 성별 상태를 조회하는 함수.

    설명:
    - 사용자가 특정 성별(여성 또는 남성)으로 목소리를 변경하길 원할 때 gender 값을 1 또는 2로 설정.
    - 사용자가 "다른 성별", "다르게", "변경" 등 명확하지 않은 성별 변경 요청을 할 경우 gender=-1을 사용하여 기본/미지정 상태로 변경 요청.
    - 성별 변경과 상태 조회는 상호 배타적이며, get=True로 호출하면 현재 성별 상태만 조회.
    - gender와 get 파라미터는 동시에 사용하지 않으며, get이 True일 때 gender 값은 무시됨.

    Parameters:
    - gender (int, optional): 목소리 성별 코드 (get=False일 때만 사용 가능)
        * 1 → 여성 목소리
        * 2 → 남성 목소리
        * -1 → 기본/기타 또는 명확하지 않은 성별 변경 요청
        * None → 변경 요청 없음 (기본값)
    - get (bool): 현재 음성 성별 조회 여부
        * True  → 현재 목소리 성별 상태를 조회 (gender는 무시됨)
        * False → 성별 변경 요청 처리 (gender 값에 따름)
        
    우선순위 및 규칙:
    - get=True 요청 시 gender 파라미터는 무시하고 현재 상태 조회만 수행.
    - 성별 변경 요청 시 명확한 성별(여성=1, 남성=2)을 우선 적용.
    - "다른 성별", "다르게" 등 불특정 성별 변경 요청은 gender=-1로 해석하여 기본/미지정 모드로 변경 또는 음성 엔진 기본값 유지.
    
    

def function_GN(enable: bool = None, get: bool = False):
    
    프라이버시 모드(Privacy Mode)를 제어하거나 현재 상태를 조회하는 함수.

    설명:
    - 사용자가 "프라이버시 모드 켜줘/작동시켜/활성화해줘/설정해줘/실행해줘" 등 명령 시 enable=True로 기능 활성화
    - 사용자가 "프라이버시 모드 꺼줘/중지해줘/해제해줘/비활성화해줘" 등 명령 시 enable=False로 기능 비활성화
    - 사용자가 "프라이버시 모드 상태 알려줘/지금 켜놨나요/상태 좀 볼래/돌아가고 있니/멈춰있나요" 등 상태 조회 요청 시 get=True로 호출
    - enable과 get은 상호 보완적이며, 일반적으로 동시에 사용되지 않음. enable이 지정되면 기능 제어, get=True면 상태 조회.
    - enable과 get이 모두 None 또는 False일 경우 기본 동작은 기능 제어 또는 조회 없음.

    Parameters:
    - enable (bool, optional): 프라이버시 모드 활성화/비활성화 제어 파라미터
        * True  → 프라이버시 모드 켜기 (기능 활성화)
        * False → 프라이버시 모드 끄기 (기능 비활성화)
        * None  → 기능 제어 명령 없음
        ※ enable이 지정되면 get값은 무시함.
    - get (bool): 프라이버시 모드 상태 조회 여부
        * True  → 현재 프라이버시 모드 상태 반환 (활성화 여부)
        * False → 상태 조회하지 않음

    반환값:
    - 상태 조회 시 (get=True) 현재 프라이버시 모드 활성화 여부(bool)를 반환
    - 기능 제어 시 (enable 지정) 성공 여부나 없음(None) 반환 (구현에 따라 다름)

    동의어 및 명령어 그룹화:
    - 활성화 명령어: 켜줘, 작동시켜, 활성화해줘, 설정해줘, 실행해줘
    - 비활성화 명령어: 꺼줘, 중지해줘, 해제해줘, 비활성화해줘
    - 상태 조회 명령어: 상태 알려줘, 켜놨나요, 상태 좀 볼래, 돌아가고 있니, 멈춰있나요
    
    

def function_PG():
    
    고정 청정(Fixed Purification) 모드를 실행하는 함수.

    설명:
    - 사용자가 "고정 청정 온", "고정 공청 기능 켜줘", "고정 공기 청정 실행해줘" 등과 같이
      특정 위치에서 고정된 공기 청정 모드 실행 요청 시 호출됨.
    - 일반적인 "공기 청정 켜줘", "청정 켜줘", "공기 청정기 켜줘" 등의 요청도 이 함수가 처리하며,
      이 경우 고정 청정 모드로 동작함.
    - function_PG는 고정 청정 모드 켜기 동작만 수행하며, 별도의 파라미터를 받지 않음.
    - 다른 청정 모드나 세부 설정과 구분하여 고정 청정 모드임을 명확히 함.

    Parameters:
    - 없음
    
    

def function_EW(type: int = None, get: bool = False):
    
    에너지/환경 관련 모드(특히 온도 단위) 설정 또는 상태를 조회하는 함수.

    설명:
    - 사용자가 온도 단위를 섭씨, 화씨 등으로 바꾸고자 할 때 type 값에 따라 모드를 설정함.
    - 온도 단위 변경 요청 시 type 파라미터가 필수이며, 값을 기반으로 단위를 지정함.
    - 사용자가 현재 설정된 온도 단위를 알고자 할 때 get=True로 상태를 조회함.
    - type과 get은 상호 배타적이며, 동시에 설정할 수 없음.
    - type이 None인 경우, 명확한 단위 지정 없이 변경 요청 시 기본값(-1)로 처리하여 알맞은 기본 모드 전환을 시도함.

    Parameters:
    - type (int, optional): 모드 구분 및 온도 단위 설정
        * -1 → 기본 모드 (명확한 단위 지정 없이 단위 변경 요청 시 기본 처리)
        * 0  → 섭씨 모드 (Celsius)
        * 1  → 화씨 모드 (Fahrenheit)
    - get (bool, optional): 상태 조회 여부
        * True  → 현재 모드/설정된 온도 단위 조회
        * False → 상태 조회하지 않음 (설정 모드 동작)

    규칙:
    - get=True이면 type은 반드시 None이어야 하며, 상태 조회만 수행.
    - get=False이면 type은 반드시 지정되어야 하며, 명확한 단위 지정이 없을 경우 기본값 -1을 할당하여 단위를 설정함.
    - type과 get은 동시에 True/값이 될 수 없음.
    - 동의어 및 표현 예:
        * 상태 조회 (get=True):
            - "온도 단위 알려줘", "설정된 온도 표시 말씀해주세요", "기기에 설정된 온도 단위 알려주세요",
              "사용 중인 온도 표시 말씀해주세요", "사용 중인 온도 표기 체계 알려주세요", "기본 설정된 온도 단위 알려줘"
        * 단위 변경 (get=False, type 지정):
            - 섭씨 변경: "섭씨 단위로 바꿔줘", "섭씨 단위가 편해요", "섭씨 단위로 바꾸고 싶어요"
            - 화씨 변경: "화씨로 바꿔줘", "화씨로 바꿔줄래", "온도 단위를 화씨로 변경해주세요"
            - 기본 모드 변경 (구체 단위 미명시): "온도 단위 바꾸고 싶어", "온도 단위 바꾸고 싶어요",
              "온도 단위 설정을 바꿔줘", "온도 단위 바꾸고 싶은데", "온도 단위 바꾸는 것이 좋겠습니다"

    예외 및 권장 처리:
    - 발화에 단위 변경 의도가 있으나 구체 단위가 명시되지 않은 경우, get=True로 상태 조회하는 호출은 부적절.
      이 경우 type=-1 (기본 모드 변경) 호출로 수정해야 함.

    반환:
    - 상태 조회 시 현재 설정된 온도 단위 정보 반환.
    - 설정 모드 시 변경 성공 여부 등 처리 결과 반환.

    
    

# --- 함수 호출 검증 및 수정 ---
# 수정 대상 발화:
# "온도 단위 설정을 바꿔줘" 원래 매핑: <function_EW>(get=True)
# → 수정: <function_EW>(type=-1)

# 수정 이유:
# '온도 단위 설정을 바꿔줘'는 온도 단위 변경 요청으로 단위 지정이 없으므로
# type=-1 기본 모드 변경으로 설정해야 하며, get=True(조회)와 상충되어 잘못 매핑됨.

# 결과:
# 기존 매핑 <function_EW>(get=True) → 수정 매핑 <function_EW>(type=-1)

# --- 요약 ---
# - get과 type 파라미터는 상호배타적임을 명확히 강조.
# - 단위 변경 의도 미확인 발화는 type=-1 기본 모드 변경 호출로 매핑.
# - 상태 조회는 명확한 조회 의도 발화에 한함.


# 전체 매핑 데이터 중 일치하지 않는 부분은 위 한 건이며,
# 이 보완된 명세로 모든 데이터셋 발화가 일관적으로 해석되고 매핑 가능함.

def function_BS(enable: bool):
    
    Black Mode(블랙 모드)를 켜거나 끄는 함수.
    - 모드명은 별도 파라미터로 받지 않으며, 발화 속 트리거 단어를 인식해 동일 기능을 수행한다.

    트리거 대상(모드 동의어 확장):
      - 기본: "블랙", "어두운", "다크", "고스트", "나이트", "야간", "조용한", "정숙"
      - 확장: "암전", "딥", "다크니스", "차분한", "고요한", "무음", "사일런트", "은신", "스텔스", "쉿"
      - 복합 표현 예: "블랙 모드", "다크 모드", "고스트 모드", "나이트 모드",
                    "조용한 모드", "정숙 모드", "사일런트 모드", "스텔스 모드"

    동작 판정(의미 동의어):
      - 활성화(True): "켜줘", "켜", "시작해줘", "시작", "실행해줘", "실행", "설정해줘", "설정", "활성화"
      - 비활성화(False): "꺼줘", "꺼", "중지해줘", "중지", "종료해줘", "종료", "해제해줘", "해제", "비활성화"

    판정 규칙:
      1) 발화에 상기 '트리거 대상' 중 하나라도 포함되면 본 함수를 호출한다.
      2) 활성/비활성 표현이 혼재할 경우 → 마지막에 등장한 표현을 우선한다.
      3) 활성/비활성 표현이 전혀 없고 트리거만 있는 경우 → 기본값: 활성화(True).
      4) 트리거(모드 동의어)가 전혀 없으면 이 함수를 호출하지 않는다.

    Parameters:
      - enable (bool): 모드 on/off
          * True  → 켜기 / 시작 / 실행 / 설정 / 활성화
          * False → 끄기 / 중지 / 종료 / 해제 / 비활성화

    예시 매핑:
      - "블랙 모드 켜줘"             → function_BS(enable=True)
      - "어두운 모드 켜줘"           → function_BS(enable=True)
      - "고스트 모드 실행해줘"       → function_BS(enable=True)
      - "나이트 모드 설정해줘"       → function_BS(enable=True)
      - "조용한 모드로 바꿔줘"       → function_BS(enable=True)
      - "나이트 모드 꺼줘"           → function_BS(enable=False)
      - "고스트 모드 중지해줘"       → function_BS(enable=False)
      - "정숙 모드 해제해줘"         → function_BS(enable=False)
      - "어두운 모드 켰다가 꺼줘"    → function_BS(enable=False)
      - "블랙 모드"                  → function_BS(enable=True)

    
    

def function_QD(type: int = None, get: bool = False):
    
    기기의 센서 감도(민감도)를 설정하거나 현재 상태를 조회하는 함수.

    설명:
    - 센서 감도를 변경하거나 현재 상태를 조회하려는 의도에 따라 파라미터 지정
    - 감도 변경 요청 시 type 값을 명확히 지정
    - type=-1은 감도 변경 의도 있으나 구체 레벨 미지정, 애매한 조절 의도 표현에 사용
    - get=True인 경우 현재 감도 상태 조회
    - type과 get은 상호배제 관계이며, 동시에 값이 지정될 수 없음 (에러 처리)
    - 감도 레벨은 0, 1, 2로 구분하며, 각 레벨에 대한 동의어를 포함
      * 0 → 낮음 (낮게, 낮음, 내려, 낮춰주세요, 내리기 등 감도 감소 의도)
      * 1 → 보통 (보통, 중간)
      * 2 → 높음/민감 (높게, 민감, 강함, 강도, 올리기, 높여 등 감도 증가 의도)
    - '강도' 포함 표현은 원칙적으로 type=2 우선 적용하되, 문맥이 완전히 불명확한 경우에 한해 type=-1로 지정 가능
    - 애매한 표현(예: "감도 조절", "레벨 맞춰줘")은 type=-1 지정
    - 감도 조절 의도 표현은 반드시 type 파라미터로 처리하며 get=True와 중복 불가
    - 감도 상태 조회는 get=True로만 처리
    - type과 get 동시에 지정 시 함수 호출 에러 처리
    - 기본값:
      * type=None → 감도 변경 요청 없음
      * get=False → 조회 요청 없음

    Parameters:
    - type (int, optional): 센서 감도 설정 값 (get과 상호배제)
        * 0 → 낮음 (감도 감소 의도 포함, '낮춰주세요' 등 명확한 감도 감소 표현 포함)
        * 1 → 보통
        * 2 → 높음/민감 (감도 증가 의도 포함, '강도' 포함 표현 우선 적용)
        * -1 → 감도 변경 의도 있으나 구체 레벨 불명확한 경우 (강도 제외)
        * None → 감도 변경 요청 없음
    - get (bool): 현재 센서 감도 상태 조회 여부 (type과 상호배제)
        * True → 감도 상태 반환 (조회 의도)
        * False → 조회하지 않음

    규칙:
    - type과 get은 반드시 상호배제 관계이며, 동시에 지정할 수 없음 (동시 지정 시 오류)
    - 감도 조절 관련 모든 표현은 type 파라미터로 처리
    - 명확한 감도 레벨 명령어는 type=0,1,2로 구분하여 지정
    - '강도'를 포함하는 표현은 기본적으로 type=2 우선 적용
    - '강도' 표현이 매우 불명확한 문맥에서는 type=-1로 지정 가능하나 사례가 매우 드묾
    - 애매한 조절 표현(예: '감도 조절', '레벨 맞춰줘')은 type=-1 지정
    - 감도 조절 동의어(예: '낮춰주세요', '내려', '올리기', '높여')는 반드시 type으로 처리하며 get=True와 중복 불가
    - 감도 상태 조회 발화는 get=True로 지정
    - 기본값(type=None, get=False)은 감도 변경 및 조회 요청 없음 의미

    반환값:
    - get=True인 경우 현재 감도 상태(0,1,2 중 하나)를 반환
    - type 지정 시 감도 변경 성공 여부 또는 결과 반환 (구현에 따라 다름)

    동의어 예시:
    - "센서 민감도 높음", "감지 감도 강도 높여" = type=2
    - "감지 감도 보통", "보통으로 맞춰줘" = type=1
    - "감지 감도 낮게", "낮춰주세요", "내려" = type=0
    - "감지 감도 레벨 맞춰줘", "감도 조절할래요" = type=-1
    - "감지 감도 알려줘", "현재 감도 뭐야?" = get=True

    추가 설명:
    - '강도' 포함 표현이 명백하면 반드시 type=2로 지정하며, 모호하여 완전 불명확할 경우에만 type=-1 사용
    - 예시 발화에 있는 동의어를 기준으로 매핑할 것
    - type과 get이 동시에 지정된 경우는 호출 오류임
    - "낮춰주세요" 등 감도 감소 의도가 명확한 표현은 반드시 type=0으로 처리하며, get=True 지정은 부적절함
    
    

def function_BP(enable: int = None, type: int = None, get: bool = False):
    
    에이아이 모드(AI Mode)를 제어하거나 상태를 조회하는 함수.

    설명:
    - enable 파라미터는 기능 활성화 및 비활성화를 제어
      * enable=0: 기능 활성화 (켜기, 시작하기, 작동시키기)
      * enable=1: 기능 비활성화 (끄기, 중단하기, 종료하기)
      * None: enable 조작 없음
    - type 파라미터는 제어할 AI 모드의 구체적 유형을 지정
      * -1: 기본 모드 (일반 AI 모드)
      * 0: 실외 대기질 연동 모드
      * 1: 공간별 누적 데이터 모드
      * 2: 전체/복합 모드 (둘 다)
      * None: 모든 모드에 대해 동작하지 않음 (enable 있을 경우 기본 모드 대상)
    - get 파라미터는 현재 AI 모드 상태 조회 여부 지정
      * True: AI 모드 활성 상태를 조회 (enable 및 type 무시)
      * False: 상태 조회하지 않음

    추가 규칙:
    - get=True이면 enable, type 값은 무시됨
    - enable, type 둘 다 None 이면 아무 동작도 하지 않음
    - enable과 함께 type이 없으면 type은 기본값 -1로 설정됨 (기본 모드 대상)
    - type 값 중 2 (전체/복합 모드)은 "둘 다", "모두" 등 복수 표현과 매칭됨
    - 동의어 정리
      * 켜다 (켜줘, 온, 시작, 작동 등) → enable=0
      * 끄다 (꺼줘, 꺼, 오프, 중단, 종료, 끄고 제발 등) → enable=1
      * 실외 대기질 연동, 외부 대기 상태 연동, 외부 공기질 데이터 등은 type=0
      * 공간별 누적 데이터, 공간별 공기질 누적, 공기질 이력 연동 등은 type=1
      * 둘 다, 모두, 복합 모드 등은 type=2
      * 기본 모드(명시 없거나 단순 온/오프 요청)는 type=-1
    - 호출 시 get=True이면 enable, type은 None으로 설정해야 함 (상태 조회 모드)
    - enable, type 동시 지정 시 enable과 함께 해당 type 모드만 제어
    - enable 값 우선순위로, get 가 True 일 때만 조회로 작동

    Parameters:
    - enable (int or None): 기능 on/off 제어 값
        * 0 → 기능 활성화 (켜기, 시작 등)
        * 1 → 기능 비활성화 (끄기, 종료 등)
        * None → 조작 없음
    - type (int or None): 실행 모드 구분 값
        * -1 → 기본 모드 (명시 없을 때 기본값)
        * 0 → 실외 대기질 연동
        * 1 → 공간별 누적 데이터 연동
        * 2 → 전체/복합 모드 (둘 다)
        * None → 대상 모드 지정 없음 (enable 있을 때 기본 모드로 간주)
    - get (bool): 현재 모드 상태 조회 여부
        * True → 모드 활성 상태 조회 (enable, type 무시)
        * False → 조회하지 않음 (enable, type에 따라 제어)

    반환값:
    - 없음 (void). 함수 호출에 따른 AI 모드 제어 또는 상태 조회 트리거.

    예:
    - function_BP(enable=0, type=0)  # 실외 대기질 연동 모드 활성화
    - function_BP(enable=1, type=2)  # 전체 모드 비활성화
    - function_BP(get=True)           # AI 모드 활성 상태 조회
    
    

def function_KP(type: int):
    
    기기의 충전 상태와 관련된 정보를 제공하거나 충전 문제를 확인하는 함수.

    설명:
    - 사용자가 충전 소요 시간을 묻는 경우(type=1), 완충까지 걸리는 시간 또는 현재 충전 상태와 관련된 정보를 제공함.
    - 사용자가 충전 문제나 충전 불가 상황을 보고하는 경우(type=2), 충전 불능 문제 확인 및 대응 방안을 안내함.
    - 동의어 및 표현 변형(예: "완충까지 얼마나 걸려?", "충전 시간이 몇 시간이야", "충전이 안 돼", "충전이 하나도 안 됐어" 등)을 모두 포괄함.
    - 범위 및 강조 표현이 포함되어도 충전 시간 조회는 항상 type=1, 충전 문제는 항상 type=2로 처리함.

    Parameters:
    - type (int): 충전 관련 요청 구분
        * 1 → 충전 시간, 완충 소요 시간 조회 요청
        * 2 → 충전 문제 확인 및 대응 요청
    
    

def function_EN(type: int):
    
    에너지 절약 모드 및 전원 관련 설정을 제어하거나 특정 기능 정보를 조회하는 함수.

    설명:
    - 사용자가 에너지/전력 관리 또는 특정 내장 기능(예: 웰컴, 청정, 릴렉스, 웨이크업, 바이탈 사인 등) 관련 요청 시 호출됨.
    - type 값에 따라 요청된 모드 또는 기능의 세부 구분이 결정됨.
    - 본 함수는 설정 변경 외에 특정 기능 설명 요청에도 대응함. 따라서 type별 기능 설명 조회 목적도 포함.

    Parameters:
    - type (int): 전력/에너지 모드 및 내장 기능 구분 값
        * 1 → 일반 절전 모드 / 자기소개, 기본 기능 설명 요청
        * 2 → 자동 절전 모드 / 기본 기능 관련 설명 요청 (예: "넌 뭘 할 수 있어?")
        * 3 → 대기 모드 / 청정 기능 관련 요청
        * 4 → 강력 절전 모드 / 웰컴 기능 관련 요청
        * 5 → 전원 차단 모드 / 웨이크업 기능 관련 요청
        * 6 → 에너지 최적화 모드 / 릴렉스 모드 관련 요청
        * 7 → 기타 전력 관리 모드 / 바이탈 사인 기능 관련 요청

    규칙 및 주의사항:
    - type 값은 1~7 사이의 정수로 한정하며, 범위 외 값은 허용하지 않음.
    - 동일 type에 대해 전력 모드 변경 요청과 기능 설명 요청이 혼재되어 있음. 이 경우 내부 문맥 및 추가 파라미터가 필요하지만, 현재 명세에서는 type 만으로 대응.
    - type별로 대표적인 내장 기능 또는 모드로 매핑되어 있어, 요청 의도를 해석하여 적절히 사용해야 함.

    반환:
    - 함수 호출 시 동작은 요청된 모드 설정 또는 기능 정보 제공에 따라 달라질 수 있음. 반환 스키마는 시스템 설계에 따름.
    
    

def function_SC(enable: bool = None, get: bool = False):
    
    공기질 상태 표시 LED 기능을 제어하거나 현재 상태를 조회하는 함수.

    설명:
    - enable 파라미터가 설정되면 공기질 상태 표시 LED 기능의 켜기/끄기 상태를 변경함.
    - get=True로 설정하면 현재 LED 상태를 조회함.
    - enable와 get은 상호 배타적: enable이 None일 때만 get을 사용할 수 있으며, 동시에 두 값을 설정할 수 없음.
    - enable이 None이고 get=False인 경우는 아무 동작도 하지 않음.

    Parameters:
    - enable (bool, optional): 공기질 상태 표시 LED on/off 제어
        * True  → LED 켜기
        * False → LED 끄기
        * None  → 기능 제어하지 않음 (기본값)
    - get (bool): 공기질 상태 표시 LED 상태 조회 여부
        * True  → 현재 LED 상태 반환
        * False → 조회하지 않음 (기본값)

    사용 규칙:
    - enable와 get은 동시에 True/False로 설정할 수 없음. 
    - enable가 None일 때만 get의 True가 유효하며 상태 조회 요청임.
    - 명령어 의미에 따라 enable=True/False 또는 get=True로 매핑.

    동의어 및 표현 예:
    - 켜줘, 작동, 기능 켜기 → enable=True
    - 꺼줘, 해제, 끄기 → enable=False
    - 켜져있어?, 작동 중인지 알려줘 등 상태 문의 → get=True
    
    

def function_CK():
    
    기기가 사용자를 따라오도록(Follow Me 모드) 설정하는 함수.

    설명:
    - 사용자가 "팔로미", "나 따라와", "내 뒤를 따라와" 등과 같이 사용자를 따라와 달라는 요청을 했을 때 호출됨.
    - 별도의 파라미터가 없으며, 이 함수 호출로 팔로미 모드를 단순히 활성화한다.

    Parameters:
    - 없음
    
    

def function_HG(theme: int = -1, get: bool = False):
    
    대기화면(홈 화면) 테마를 설정하거나 현재 테마 상태를 조회하는 함수.

    설명:
    - 사용자가 대기화면 테마 변경을 요청하면 theme 파라미터에 해당 테마 코드를 지정하여 호출.
    - 특정 테마를 명시하지 않거나 "아무거나", "다른 걸로" 등 랜덤 변경 의도가 있는 경우 theme=-1로 호출.
    - 사용자가 현재 테마 상태를 문의하면 get=True로 호출.
    - theme와 get은 상호 배타적이며 동시에 유효한 값으로 설정할 수 없음.
    - get=True일 경우 theme 파라미터는 무시되고 오직 상태 조회만 수행.

    Parameters:
    - theme (int): 대기화면 테마 코드 (get==False일 때만 유효)
        * 0  → 기본 테마
        * 2  → 실내/상세 공기질 테마
        * -1 → 랜덤 테마 변경 (지금 테마가 아닌 다른 테마로 무작위 변경)
    - get (bool): 현재 테마 상태 조회 여부
        * True  → 현재 테마 상태 조회 (theme 무시)
        * False → 테마 변경 요청 (theme 값에 따라 변경)

    규칙:
    1. theme와 get은 상호 배타적이며 동시에 유효한 값으로 설정할 수 없음.
       - 둘 다 유효하게 설정된 경우 get이 우선시되며 theme는 무시됨.
    2. "대기화면 테마를 변경해줘", "아무거나 다른 테마로 바꿔줘" 등 명시적 지정이 없는 변경 요청은
       반드시 theme=-1로 처리하여 랜덤 테마 변경을 수행함.
    3. 상태 조회는 명확한 문의 발화(예: "대기화면 테마가 뭐야?")에만 get=True를 사용하며, 이 경우 theme는 무시됨.
    4. theme=-1은 항상 랜덤 테마 변경을 의미하며, 현재 테마와 동일하지 않은 다른 테마로 무작위 선택함.
    5. 진술성 발화(예: "대기화면이 기본 테마로 설정됐어")는 상태 조회로도 해석 가능하며, 필요 시 get=True로 처리함.

    예시:
    - "대기화면 테마를 변경해줘" → function_HG(theme=-1)
    - "아무거나 다른 테마로 바꿔줘" → function_HG(theme=-1)
    - "랜덤으로 바꿔줘" → function_HG(theme=-1)
    - "대기화면 기본 테마로 설정해줘" → function_HG(theme=0)
    - "대기화면 실내 공기질 테마로 해줘" → function_HG(theme=2)
    - "지금 대기화면 테마가 뭐야?" → function_HG(get=True)
    - "대기화면 상태 알려줘" → function_HG(get=True)
    - "대기화면이 기본 테마로 설정됐어" → function_HG(get=True)  # 진술도 조회로 처리 가능
    
    

def function_SV(type: int):
    
    기기의 현재 상태(모드, 시간, 날짜, 네트워크)를 조회하는 함수.

    설명:
    - 사용자의 상태 조회 요청에 따라 해당 상태 코드를 파라미터로 전달하여 조회함.
    - 'type' 값에 따른 조회 대상은 다음과 같이 명확히 구분됨.
    - 발화에서 동의어(예: 켜져있어/작동 중/활성화/연결됨), 부정어(예: 안 켜졌어?), 강조 표현, 범위 표현 등을 모두 type 값에 매핑함.

    Parameters:
    - type (int): 조회 대상 코드 (상호 배제)
        * 1 → 현재 시간 조회
        * 2 → 매너모드 상태 조회
        * 3 → 나이트 모드 상태 조회
        * 4 → 네트워크(Wi-Fi 포함) 연결 상태 조회
        * 5 → 현재 날짜 조회

    도메인:
    - type은 반드시 위 1~5의 정수 중 하나여야 함.

    기본 동작:
    - 함수 호출 시 해당 type의 상태 정보를 반환함.
    - 명확한 상태(ON/OFF, 연결됨/끊김, 현재 시간/날짜)를 반환하는 API로 구현됨.

    동의어 사전 및 매핑 규칙:
    - 'Wi-Fi', '인터넷 연결', '네트워크'는 type=4로 매핑
    - '매너모드', '매너 모드'는 type=2로 매핑
    - '나이트 모드', '야간 모드'는 type=3으로 매핑
    - '시간', '몇 시', '지금 몇 시'는 type=1로 매핑
    - '날짜', '며칠', '몇 월 며칠' 등은 type=5로 매핑

    반환 스키마:
    - 상태 조회 시 boolean 또는 상태명 문자열 반환 예상
    - 시간/날짜 조회는 문자열 또는 표준 포맷 반환

    
    

def function_HS(type: int = -1):
    
    기기 언어(Language)를 변경하거나 기본 언어 변경 요청을 처리하는 함수.

    설명:
    - 특정 언어로 변경 요청 시 해당 언어 코드로 호출됨.
        * "한국어로 바꿔줘", "한글로 설정해" 등 → type=1 (한국어)
        * "영어로 바꿔줘", "영어로 기기 언어 설정해" 등 → type=2 (영어)
    - 명시적 언어 지정이 없고 단순 변경 요청, 기타/미지정 언어 변경 요청인 경우 type=-1로 호출됨.
        * "언어 바꿔줘", "다른 나라 말로 바꿔줘", "기기 언어를 변경할 수 있을까" 등

    Parameters:
    - type (int): 언어 코드, 기본값은 -1(기타/미지정)
        * 1 → 한국어
        * 2 → 영어
        * -1 → 기타 또는 언어 미지정 변경 요청

    규칙:
    - type 값은 하나만 지정 가능하며, 동시 다중 언어 변경 요청은 지원하지 않음.
    - 명확한 언어 지정이 없으면 기본적으로 -1 처리함.
    
    

def function_DW(type: int):
    
    기기 사용 및 설치 시 주의사항을 안내하는 함수.

    설명:
    - 사용자가 안전 관련 주의사항을 문의할 때 호출됨.
    - type 값에 따라 안내되는 주의사항의 범주가 다음 중 하나로 구분됨.
    - 서로 배타적인 범주로, 한 번 호출 시 하나의 type 값만 설정 가능.

    Parameters:
    - type (int): 주의사항 종류 (필수 파라미터)
        * 1 → 어린이 안전 관련 주의사항
        * 2 → 일반 안전 수칙 (예: 충전 중 주의사항, 작동 시 주의사항 등)
        * 3 → 설치 시 주의사항
        * 4 → 사용 시 주의사항 (기기 사용 중 주의할 점 포함)
    
    기본 동작 규칙:
    - type=1 은 어린이 관련 안전 주의사항만 제공
    - type=2 는 충전 및 작동 관련 일반 안전수칙을 주로 포함
    - type=3 은 설치 단계에서의 주의점 안내
    - type=4 는 사용 중 주의할 점을 포괄
    - 중복이나 혼용 문의 시, 사용 의도에 따라 가장 근접한 type을 단일 선택

    반환값:
    - 요청한 type 에 해당하는 주의사항 텍스트 정보 반환

    예시:
    - "어린이가 주의해야 하는 사항 알려줘" → type=1
    - "충전 시 조심해야 할 점" → type=2
    - "설치할 때 주의사항 알려줘" → type=3
    - "기기 사용할 때 주의할 점 알려줘" → type=4
    
    

def function_UY():
    
    기기에 표시된 에러코드의 의미와 원인을 설명하는 함수.

    설명:
    - 사용자가 에러코드 관련 질문을 할 때 호출됨.
    - 입력 파라미터 없이 현재 화면에 표시된 에러코드에 대해 의미, 원인 및 대처 방법을 설명.
    - 에러코드를 명시적으로 질문하는 경우 ("F01 에러코드 의미가 뭐야?")에도 동일하게 호출하며, 내부 로직에서 해당 에러코드 정보를 파악한다.

    Parameters:
    - 없음
    
    

def function_XO():
    
    기기의 오류 이력(에러 히스토리)을 조회하는 함수.

    설명:
    - 사용자가 "오류 기록 보여줘", "에러 내역 확인해줘", "에러 이력 표시해줘" 등과 같이
      기기에서 발생한 오류 기록을 확인하려고 할 때 호출됨.
    - 별도의 파라미터 없이 호출 시 기기의 오류 로그 전체 이력을 반환.

    Parameters:
    - 없음
    
    

def function_QT(enable: bool = None, get: bool = False):
    
    음성 인식(Voice Recognition) 기능을 제어하거나 현재 상태를 조회하는 함수.

    설명:
    - enable 파라미터를 통해 음성 인식 기능을 켜거나 끌 수 있음
    - get=True 로 설정하면 현재 음성 인식 기능 상태를 조회함
    - enable와 get은 상호 배제 관계이며, 동시에 True/None 이 될 수 없음
    - enable가 None이고 get=False인 경우, 특별 동작 없이 함수 호출은 무의미함

    Parameters:
    - enable (bool, optional): 음성 인식 기능 on/off 제어 (get=True인 경우 None이어야 함)
        * True  → 음성 인식 기능 켜기
        * False → 음성 인식 기능 끄기
        * None  → 제어 동작 없음 (상태 조회인 경우 사용 안 함)
    - get (bool): 음성 인식 기능 상태 조회 여부 (enable이 None일 때만 True로 설정 가능)
        * True  → 현재 음성 인식 기능 상태 반환
        * False → 상태 조회하지 않음

    동의어:
    - 활성화: 켜줘, 시작해, 켜져있어, 상태 알려줘, 상태가 어때
    - 비활성화: 꺼줘, 중지해, 멈춰줘, 종료해

    우선순위 규칙:
    - get=True 우선 처리: 상태 조회가 명확한 경우 enable 파라미터는 None 이어야 함
    - enable 설정 시 get=False 로 적용

    반환 스키마:
    - get=True 일 때 : 현재 음성 인식 상태를 bool 값으로 반환
        * True → 기능 켜짐
        * False → 기능 꺼짐
    - enable 설정 시 : 제어 성공 여부 또는 상태 반영 결과 반환

    예외 처리:
    - enable과 get이 동시에 의미 있는 값으로 주어지면 get 우선 처리하며 enable 무시
    - enable=None, get=False인 호출은 무시하거나 오류 처리 권장
    
    

def function_NK(speed: int = None, get: bool = False):
    
    기기의 풍량(바람 세기)을 제어하거나 현재 설정 상태를 조회하는 함수.

    설명:
    - 사용자가 바람 세기를 특정 단계(약풍, 중풍, 강풍, 터보)로 절대 변경 요청 시 해당 단계의 speed 값을 설정(1~4).
    - '자동', '알아서', '기본 속도' 등의 표현은 자동 모드로 설정(speed=0).
    - 풍량을 상대적으로 한 단계 낮추거나 높이길 요청 시 각각 상대 제어 값(-1 또는 +1)으로 설정.
    - 기본 속도는 자동 모드(speed=0)로 정의.
    - 풍량 조절만 요청하되 구체적 단계 명시가 없으면 모호 상태로 처리하여 speed=None 유지 권장.
    - 풍량 제어(speed)와 상태 조회(get)는 상호 배타적이며 동시에 사용하지 않음.
    - speed 또는 get 중 최소 하나는 반드시 지정되어야 함.

    Parameters:
    - speed (int, optional): 풍속 제어 값 (절대 또는 상대 값)
        * -1  → 풍속 단계 1단계 낮추기 (상대 제어)
        * 0   → 자동 모드 (절대 값, 기본 속도)
        * 1   → 약풍 (절대 값)
        * 2   → 중풍 (절대 값)
        * 3   → 강풍 (절대 값)
        * 4   → 터보 (절대 값)
        * +1  → 풍속 단계 1단계 높이기 (상대 제어)
        - 기본값 None 은 의미 없으며 speed 또는 get 중 하나는 반드시 지정 필요.
        - speed 값은 위 도메인 중 하나여야 함.
        - 명확한 단계 지정 없는 모호한 조절 요청 시 speed=None 유지 권장.

    - get (bool): 현재 풍속 상태 조회 여부
        * True  → 현재 풍속 상태 반환 (speed 는 None 이어야 함)
        * False → 조회하지 않음

    제약 조건:
    - speed 와 get 은 동시에 값 지정 불가(상호 배타적).
    - 기본값 speed=None, get=False 는 무효.
    - 명확 단계 지정 없는 '조절' 단독 요청은 모호 처리하여 speed=None 유지, 추가 정보 요구 권장.
    - '풍속을 최소로 설정해줘'는 모호하며 기본적으로 상대 1단계 낮추기(speed=-1) 권장하나 상황에 따라 절대 약풍(speed=1) 가능, 특별 주의 요망.
    - 오타 정정:
      • '강품' → '강풍'(speed=3) 자동 보정.

    동의어 및 우선순위 해석 규칙:
    - '약하게', '풍속을 약하게 조정해줘', '약풍' → speed=1 (절대 약풍 우선 해석)
    - '중간', '중풍' → speed=2 (절대 중풍)
    - '강한 바람', '강풍', '높은 바람', '강품'(오타 포함) → speed=3 (절대 강풍)
    - '터보' → speed=4
    - '자동', '알아서', '기본 속도' → speed=0
    - '한 단계 낮추다', '조금 줄여주세요', '풍량 낮춰주실래요?' → speed=-1 (상대 1단계 낮추기)
    - '풍속을 최소로 설정해줘' → 모호, 기본적으로 speed=-1 권장, 상황에 따라 speed=1 가능
    - '한 단계 높이다', '강도를 높여봐', '풍량 높여줘' 등 → speed=+1 (상대 1단계 높이기)
    - 명확 단계 없는 '조절' 요청 → speed=None (모호 상태 유지)

    동작 규칙:
    - speed 와 get은 동시에 지정 불가 (상호 배타적).
    - speed=None, get=False 상태는 무효로 요청 불가.
    - 모호 조절 요청 시 임의 speed 지정 금지하며 추가 정보 요구 권장.

    반환 스키마:
    - speed 제어 시: 성공 여부 또는 변경된 속도 반환 (구현별).
    - get=True 시: 현재 풍속 단계 및 모드 정보 반환.

    예시 매핑:
    • "바람을 약하게 해주세요" → speed=1 (절대 약풍)
    • "높은 바람 속도로 바꿔주시겠어요" → speed=3 (절대 강풍)
    • "기본 속도로 팬 설정해줘" → speed=0 (자동 모드)
    • "바람 세기를 조절해줘" → speed=None (모호, 추가 정보 요구)
    • "바람 강도를 높여봐" → speed=+1 (상대 1단계 높이기)
    • "강품으로 바꿔줘" → speed=3 (오타 정정, 절대 강풍)
    • "풍속을 약하게 조정해줘" → speed=1 (절대 약풍)
    • "풍속을 최소로 설정해줘" → 기본적으로 speed=-1 권장, 상황에 따라 speed=1 가능 (특별 주의)
    
    

def function_IH(scan: bool = None, get: bool = False):
    
    스캐닝 청정(Scanning Air Purification) 기능을 제어하거나 현재 상태를 조회하는 함수.

    설명:
    - scan 파라미터로 스캐닝 청정 기능을 켜거나 끌 수 있음.
      * scan=True  → 스캐닝 청정 시작/켜기
      * scan=False → 스캐닝 청정 종료/끄기
      * None → 기능 제어 없음
    - get=True 로 설정하면 현재 스캐닝 청정 기능의 상태를 조회함.
    - scan 과 get 은 상호배타적이며, 동시에 True로 호출하지 않음.
    - get=True 가 우선되며, 이 경우 scan 값은 무시함.
    - scan과 get 파라미터가 모두 None 또는 False 인 경우, 기능 변화나 상태 조회 없이 기본 동작은 없음.

    Parameters:
    - scan (bool, optional): 스캐닝 청정 기능 on/off 제어
        * True  → 스캐닝 청정 기능 시작 또는 켬
        * False → 스캐닝 청정 기능 종료 또는 끔
        * None  → 기능 제어 없음
    - get (bool): 스캐닝 청정 상태 조회 여부
        * True  → 현재 스캐닝 청정 기능 상태 반환
        * False → 상태 조회하지 않음

    우선순위 및 규칙:
    - get=True 가 우선 처리되며, 이 경우 scan 값은 무시됨.
    - scan 값이 주어지고 get=False 인 경우 기능을 켜거나 끔.
    - 동시에 scan과 get이 True 인 경우 get=True 가 우선 적용되어 상태 조회만 수행.
    - scan과 get은 동시에 True, False로 호출하지 않도록 명확히 권고함.

    반환값:
    - 상태 조회 시 (get=True) 현재 스캐닝 청정 기능이 활성화 되어 있으면 `True`, 아니면 `False` 반환.
    - 기능 제어 시 반환값은 없음 혹은 동작 성공 여부 반환 가능(구현에 따라 다름).
    
    동의어 사전 (안내용):
    - 켜기 동의어: 시작해줘, 켜줘, 작동시켜, 시작
    - 끄기 동의어: 꺼줘, 종료, 중지해, 끝내줘
    - 상태 조회 동의어: 상태 알려줘, 켜져 있어?, 작동 중인지 알려줘, 청정중이야?, 하고있어, 켜져있어, 켜져 있어

    예시 매핑 검증:
    - "스캐닝 공기청정 종료" → scan=False
    - "스캐닝 청정중이야" → get=True
    - "스캐닝 청정 하고있어" → get=True
    - "스캐닝 청정 켜져있어" → get=True
    - "스캐닝 청정 시작해줘" → scan=True
    
    

# Explanation of revisions:
# 1) 확대된 동의어 사전에 "하고있어", "켜져있어", "켜져 있어" 등 상태 조회 표현을 추가하여 실사용 표현에 대응.
# 2) scan과 get의 상호배타성과 우선순위 규칙을 명확히 기술하여 호출 혼동 방지.
# 3) 반환값 부분에서 기능 제어 시 반환 미정을 “없음 혹은 동작 성공 여부 가능” 으로 명확히 기재.
# 4) 기본 동작 명시 및 파라미터 도메인 명확화로 모호성 제거.

def function_KI():
    
    기기를 충전 위치(홈 또는 스테이션)으로 복귀시키는 함수.

    설명:
    - 사용자가 기기를 충전하기 위해 충전 거치대나 홈 위치로 되돌려 보내도록 요청할 때 호출됨.
    - "충전하러 복귀", "스테이션 위치로 돌아가", "충전 해줘" 등과 같은 다양한 표현을 포함함.
    - 별도의 파라미터가 없으며, 단순 복귀 동작만 수행함.

    Parameters:
    - 없음
    
    

def function_CE():
    
    공기청정 관련 보고서나 결과를 조회하는 함수.

    설명:
    - 사용자가 공기청정과 관련된 리포트나 상태, 결과를 조회하고자 할 때 호출함.
    - 별도의 파라미터 없이 항상 동일하게 공기청정 결과 데이터를 반환함.

    Parameters:
    - 없음

    반환값:
    - 공기청정 리포트 또는 상태 결과 데이터 (형식 및 상세 데이터 구조는 구현에 따름)
    
    

def function_HW(type: int):
    
    대기 오염 물질(환경 유해 물질)에 대한 설명을 제공하는 함수.

    설명:
    - 사용자가 특정 대기 오염 물질에 대한 정의, 특성, 건강 영향, 발생 원인 등 설명을 요청할 때 호출됨.
    - 요청 예시: "미세먼지가 뭐야?", "초미세먼지는 어떤 물질인가요?", "포름알데히드는 어디서 나와?", "이산화탄소를 설명해줘"
    - type 파라미터는 요청한 오염 물질을 구분하는 코드임.

    Parameters:
    - type (int): 대기 오염 물질 코드 (서로 상호 배타적이며 필수값)
        * 1 → 미세먼지 (PM10)
        * 2 → 초미세먼지 (PM2.5)
        * 3 → 유기화합물 (VOCs)
        * 4 → 질소산화물 (NOx)
        * 5 → 포름알데히드 (Formaldehyde)
        * 6 → 이산화탄소 (CO₂)

    반환:
    - 요청한 물질에 대한 상세 설명(문자열)
    
    

def function_NN(enable: bool = None, get: bool = False):
    
    UV 살균 LED 기능을 제어하거나 현재 상태를 조회하는 함수.

    설명:
    - enable이 True일 때, UV 살균 LED를 켜는 동작 수행.
    - enable이 False일 때, UV 살균 LED를 끄는 동작 수행.
    - get이 True일 때, UV 살균 LED의 현재 상태를 조회.
    - enable과 get은 상호 배타적이며, 동시에 True로 설정될 수 없다.
    - enable이 None이고 get이 False이면 아무 동작도 수행하지 않음.

    Parameters:
    - enable (bool, optional): UV 살균 LED on/off 제어
        * True  → UV LED 켜기
        * False → UV LED 끄기
        * None  → 제어 명령 없음 (기본값)
    - get (bool): UV 살균 LED 상태 조회 여부
        * True  → 현재 UV LED 상태 반환
        * False → 상태 조회하지 않음 (기본값)

    규칙:
    - get=True가 우선순위가 높아 enable 값이 지정되어도 상태 조회를 수행.
    - enable과 get 모두 False 혹은 None일 경우 아무 동작도 수행하지 않음.
    - 동의어 처리: "유브이", "유부이" 등 발음 차이 포함하여 UV를 인식.
    - "켜줘", "켜줄래", "작동시켜줘", "실행해줘" 등은 enable=True에 매핑.
    - "꺼줘", "멈춰줘", "중지해" 등은 enable=False에 매핑.
    - "켜져 있어", "상태 알려줘" 등은 get=True에 매핑.

    Returns:
    - 현재 UV 살균 LED 상태 (예: 켜짐 또는 꺼짐) 반환 시 get=True인 경우 반환값 포함.

    예시:
    - function_NN(enable=True)  # UV 살균 LED 켬
    - function_NN(enable=False) # UV 살균 LED 끔
    - function_NN(get=True)     # 현재 상태 조회
    
    

def function_FF(position: str or int):
    
    특정 위치(공간, 방, 구역 등)를 지정하는 함수.

    설명:
    - 사용자가 특정 위치에서 기기를 동작하도록 요청할 때 호출됨.
      예: "아지트에서 실행해", "설계실로 설정해", "101호실 지정해" 등.
    - position 파라미터는 동작할 위치를 나타내며, 다음 두 가지 형태 중 하나임.
    - position이 문자열인 경우: 특정 방이나 공간명(예: "아지트", "101호실", "설계실")을 지정.
    - position이 정수 -1인 경우: 기본 위치 지정 또는 위치 미지정 상태를 의미하며,
      "선택한 공간", "지금 있는 공간", "이 방" 등의 문맥에서 사용됨.
    - position은 반드시 문자열 혹은 -1 정수로만 사용하며, 다른 값은 허용하지 않음.

    Parameters:
    - position (str | int): 동작할 위치 또는 공간 이름
        * str: 정확한 방, 공간, 구역명 (예: "아지트", "설계실", "101호실")
            - 동의어 및 변형 형태는 모두 문자열로 받아들이며,
              예: "미디어실", "고급반실", "프로그램실A" 등 다양함.
        * int: -1로 고정하며, 기본 위치 또는 미지정을 의미함
            - 이때 기기는 명시적 위치 지정 없이 현재 사용자 위치나 선택된 공간에서 동작함.

    규칙:
    - position=-1은 "선택한 공간", "현재 위치", "이 방" 등과 같은 모호한 위치 표현에 대응.
    - position이 문자열일 경우 공백 제거 후 그대로 사용하며, 대소문자 구분은 없음.
    - position 파라미터는 항상 하나만 전달되며, 다중 위치 지정은 지원하지 않음.

    반환값:
    - 호출 시 별도의 반환값 없음; 위치 지정 동작 트리거 역할.

    예시:
    - function_FF(position="아지트")
    - function_FF(position="101호실")
    - function_FF(position=-1)  # 선택된 공간 또는 현재 위치
    
    
    

def function_JS(type: int):
    
    기기의 특정 기능, 모드, 구성 요소에 대한 설명을 제공하는 함수.

    설명:
    - 사용자가 특정 기능, 모드 또는 기기 구성 요소의 설명을 요청할 때 호출됨.
    - 'type' 파라미터는 요청된 설명 대상 기능 또는 요소를 구분.
    - 동의어 및 유사 표현을 모두 포함하여 아래 항목 중 하나에 매핑함.

    Parameters:
    - type (int): 설명 대상 코드 (상호 배타적)
        * 1 → 매너모드
        * 2 → 프라이버시 모드
        * 3 → 나이트 모드
        * 4 → 나무 보이스 (음성 관련 기능)
        * 5 → 온도 단위 변경 및 설정 메뉴
        * 6 → UV LED 기능
        * 7 → 디스플레이/LED (상단 화면, 전면부 LED, LED Eye 등 포함)
        * 8 → 언어 설정 관련 (지원 가능한 언어 종류, 변경 가능한 언어)
        * 9 → 센서 민감도 (설정 이유, 역할, 조정 방법 등)
        * 10 → AI 모드 (설명, 설정 방법 등)

    동의어 및 표현 규칙:
    - "매너모드", "매너모드 기능", "매너모드는 뭐야" → type=1
    - "프라이버시 모드", "프라이버시 모드 기능" → type=2
    - "나이트 모드", "나이트 모드 기능" → type=3
    - "나무 보이스", "음성 기능" 관련 표현 → type=4
    - "온도 단위", "온도 단위 변경", "온도 메뉴" 관련 질문 → type=5
    - "UV LED", "유브이 엘이디" → type=6
    - "디스플레이", "LED", "상단 화면", "엘이디 아이", "전면부 LED" 등 LED 관련 → type=7
    - "언어 설정", "설정 가능한 언어 종류", "변경 가능한 언어" → type=8
    - "센서 민감도", "민감도 센서", "센서의 민감도 조정 이유" → type=9
    - "AI 모드", "에이아이 모드" 관련 설명 요청 및 설정 → type=10

    반환값:
    - 해당 기능, 모드 혹은 구성 요소에 대한 텍스트 설명을 반환

    기본 동작:
    - 반드시 type 파라미터를 제공해야 하며,
    - type 값이 명세 범위(1~10) 밖일 경우 에러 또는 기본 설명으로 처리.
    
    

def function_HI(type: int):
    
    기기의 전력 소비량 또는 예상 전기 요금을 계산하거나 조회하는 함수.

    설명:
    - 사용자가 전력 소비량을 문의하면 소비 전력 조회 모드(type=1)로 호출
    - 사용자가 전기 요금을 문의하면 전기 요금 계산 모드(type=2)로 호출
    - type 값에 따라 기기의 에너지 효율과 전력 소모량을 기반으로 결과를 반환

    Parameters:
    - type (int): 조회/계산 종류
        * 1 → 소비 전력 조회 (기기가 현재 소비하는 전력량을 반환)
        * 2 → 전기 요금 계산 (예상 전기 요금을 반환)

    도메인 및 제한사항:
    - type은 1 또는 2만 허용
    - type 값이 누락되거나 이외 값일 경우 호출 오류 발생 가능
    
    

def function_EF(action: int = 1):
    
    공기청정 관련 기능을 즉시 실행하는 함수.

    설명:
    - 사용자가 "실행해줘", "시작해줘", "청정해줘", "청소 시작해", 등 즉시 동작 실행 요청 시 호출됨.
    - 현재 지원하는 동작 코드는 action=1 (기능 실행) 단일값임.
    - 모든 호출에서 action=1이 기본값으로 사용되며, 다른 action 값은 현재 존재하지 않음.

    Parameters:
    - action (int, optional): 수행할 동작 코드
        * 1 → 기능 실행 (기본값)
    
    

def function_MR():
    
    사용자의 자유발화(스몰토크, 일상 대화)를 처리하는 함수.

    설명:
    - 사용자가 기능 호출과 직접 관련 없는 자연스럽고 일상적인 대화를 할 때 호출됨.
    - 예: 감정 표현(피곤함, 스트레스), 취미 이야기(음악, 영화, 책, 운동 등), 일정과 계획, 음식, 여행, 쇼핑, 질문과 의견 공유 등 다양한 주제 포함
    - 기능 호출과 나누는 대화 중 대화 자체에 집중하여 사용자의 의도 파악 및 감성적인 대응에 초점
    - 다른 기능 함수들과 중첩 호출 가능하며, 이 경우 오직 자유발화 부분만 별도로 처리됨

    Parameters:
    - 없음

    동의어 및 포함 범위:
    - "피곤해", "바빠", "좋아해", "재밌어", "스트레스 받아", "운동해", "여행 가", "음악 들어", "먹을지 고민", "책 읽어", "영화 봐", "쇼핑해", "취미", "일정", "계획", "감정 표현" 등 일상생활과 감정에 관한 다양한 자연어 표현

    반환 스키마:
    - 자유발화에 대한 적절한 자연어 반응 반환 (구체적 구조는 명세 범위 밖)

    기본 동작 규칙:
    - 파라미터 없음으로 단순 호출
    - 자유발화 인식 시 이 함수 호출로 매핑
    
    

def function_PC(type: int = None):
    
    기기 관리 및 청소 방법을 안내하는 함수.

    설명:
    - 관리 또는 청소 대상에 따라 하나의 type 값으로 호출함 (여러 type 동시 지정 불가).
    - type 값은 아래 대상 중 하나로 명확히 구분되며, 각 대상별 동의어도 포함됨.
    - 필터 관련 : 필터 교체 주기(1), 필터 관리(3)
    - 센서창 및 센서 관련 : 센서창 청소(4), 라이다 센서 관리(5), 장애물 감지 센서 청소(6)
    - 충전 포트 관련 : 충전 포트 청소(7)
    - 제품 외관 관련 : 제품 외관 청소/관리(8)

    - '센서' 단어가 포함된 문의(예: 센서창, 센서 부분, 센서 청소 등)는 모두 센서창 청소(type=4)로 우선 매핑함.
    - '청소할 때 센서를 어떻게 해야 해?'와 같은 모호한 센서 관련 문의는 반드시 센서창 청소(type=4)로 매핑하며, 필터 관련(type=1,3)으로 매핑하는 일은 절대 없음.
    - 만약 발화가 '청소할 때 센서를 어떻게 해야 해?'이면서 잘못 매핑되어 필터 관련(type=1 또는 3)으로 지정된 경우 반드시 type=4로 수정해야 함.
    - 모호하거나 대상이 명확하지 않은 경우 type 값을 지정하지 않아야 함(type=None).
    - 미정의 type 코드(예: 2, 9 등) 사용은 불가하며, 함수 호출 시 지정 시 오류 처리 권고.
    - 한 번에 하나의 type만 지정 가능하며, 여러 type 중복 지정 불가.

    Parameters:
    - type (int, optional): 관리/청소 대상 코드 (한 번에 하나만 지정 가능)
        * 1 → 필터 교체 주기
            - 예시 문장: '필터 교체 주기 알려줘', '필터 교체는 얼마마다'
        * 3 → 필터 관리
            - 예시 문장: '필터 관리 어떻게 해', 'A1 필터 청소/세척/분리 방법'
        * 4 → 센서창 청소 (센서창 및 센서 부분 포함)
            - 예시 문장: '센서창 청소 방법', '센서창 관리', '센서 부분 세척', '센서 청소 방법', '청소할 때 센서를 어떻게 해야 해?'
        * 5 → 라이다 센서 관리
            - 예시 문장: '라이다 센서 관리', '라이다 센서 청소 방법'
        * 6 → 장애물 감지 센서 청소
            - 예시 문장: '장애물 감지 센서 청소', '장애물 감지 센서 청소 방법'
        * 7 → 충전 포트 청소
            - 예시 문장: '충전 포트 청소', '전원 꽂는 곳 세척/청소'
        * 8 → 제품 외관 청소/관리
            - 예시 문장: '제품 외관 청소', '외관 관리', '제품 외관 더러움 청소'

    제약사항 및 규칙:
    - type 값은 상호배타적이며 하나의 호출에 여러 type 중복 지정 불가.
    - 동의어 및 범위 표현은 내부 매핑 규칙을 통해 정확한 type 값으로 변환됨.
    - 필터 관련(type=1,3)과 센서 관련(type=4,5,6)은 명확히 구분됨.
    - '센서'가 포함된 모든 청소 관련 문의는 반드시 type=4(센서창 청소)로 우선 해석하며, 특히 '청소할 때 센서를 어떻게 해야 해?'와 같은 문장은 반드시 type=4로 매핑해야 함.
    - '청소할 때 센서를 어떻게 해야 해?'와 같이 센서 관련 모호 문의가 필터 관련(type=1,3)으로 잘못 매핑된 경우 반드시 type=4로 교정해야 함.
    - 모호하거나 대상이 불명확한 경우 type은 지정하지 않음(type=None).
    - 미정의 type 번호(2, 9 등)는 사용 불가.
    - 함수 호출 시 미정의 type 값이 지정되면 오류 처리 권고.

    반환:
    - 해당 관리/청소 방법 안내 텍스트 (구현 별도)
    
    

def function_IO(timeframe: int = 0, location: str = "0"):
    
    특정 위치와 시점의 대기질/공기질 정보를 조회하는 함수.

    설명:
    - 대기질 조회 시점과 위치를 지정하여 해당 시점의 공기질 상태를 확인한다.
    - 위치를 지정하지 않으면 기본 위치 또는 전체 실내외 위치를 의미하며 location="0" 으로 표현한다.
    - timeframe는 다음과 같이 구분한다:
        * 0 → 현재 시점 (실시간 포함)
        * 1 → 내일
        * 2 → 주말
        * 3~9 → 특정 요일별 예측, 월요일=3, 화요일=4, ..., 일요일=9
    - 요일이나 특정 날짜 언급이 없는 경우에는 현재(0), 내일(1), 주말(2)만 사용하며 
      구체적인 날짜값 범위(3~9)는 요일별 예측에 한정한다.
    - location은 지역명 또는 상세 위치명(예: "판교", "강릉")을 지정 가능하며,
      지정하지 않은 경우 또는 실내/공간별 모니터링 용도 등 위치 특정이 불가능할 땐 "0"을 사용한다.

    Parameters:
    - timeframe (int): 조회 시점 구분 값
        * 0 → 현재/실시간
        * 1 → 내일
        * 2 → 주말
        * 3~9 → 특정 요일별 예측 (3=월요일, 4=화요일, 5=수요일, 6=목요일, 7=금요일, 8=토요일, 9=일요일)
    - location (str): 조회할 위치
        * 지역명 또는 상세 위치명 (예: "판교", "서울", "뉴델리", "실내")
        * "0" → 위치 미지정 또는 전체/기본 위치 (실내외 통합, 공간별, 또는 기본 모니터링 대상)
    
    도메인:
    - timeframe은 0 이상 9 이하의 정수만 허용함.
    - location은 빈 문자열을 허용하지 않으며, 명확한 위치명이 없으면 "0"으로 설정.

    우선순위 및 기본값:
    - location 기본값은 "0" (위치 미지정)
    - timeframe 기본값은 0 (현재 시점)
    - 명확한 날짜/요일 언급이 있으면 3~9 중 적절히 설정
    - 위치 미지정 발화 시 location="0" 으로 설정

    반환값:
    - 대기질 및 공기질 상태 정보(구현에 따라 다름)
    
For the following query, you MUST choose exact function calls from the predefined set.  

Query : {query}"""




## system message
# You are a helpful assistant. Always follow the user’s instructions precisely, without making assumptions or adding extra information.
# You are a helpful assistant. Your top priority is to fulfill the user’s request exactly as written.
# You are a helpful assistant. Respond only within the scope of the user’s request. 